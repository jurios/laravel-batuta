<?php


namespace Kodilab\LaravelBatuta\Models;


use Illuminate\Database\Eloquent\Model;
use Kodilab\LaravelBatuta\Contracts\Permissionable;
use Kodilab\LaravelBatuta\Exceptions\DefaultRoleNotFound;
use Kodilab\LaravelBatuta\Exceptions\GodRoleNotFound;
use Kodilab\LaravelBatuta\Traits\HasPermissions;

class Role extends Model implements Permissionable
{
    use HasPermissions;

    protected $fillable = ['name', 'god', 'default'];

    protected $casts = [
        'god' => 'boolean',
        'default' => 'boolean'
    ];

    public function __construct(array $attributes = [])
    {
        $this->table = config('batuta.tables.roles', 'roles');

        parent::__construct($attributes);
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::deleting(function (Role $role) {

            if ($role->isDefault()) {
                throw new \InvalidArgumentException('Default role can not be removed');
            }

        });
    }

    /**
     * Returns the name of the permissions table
     *
     * @return \Illuminate\Config\Repository|mixed
     */
    public function getPermissionsTable()
    {
        return config('batuta.tables.role_permissions', 'role_permissions');
    }

    /**
     * Returns whether this role is the default role
     *
     * @return mixed
     */
    public function isDefault()
    {
        return $this->default;
    }

    public function isGod()
    {
        return $this->god;
    }

    /**
     * Returns the default role. If it does not exist, then an exception is thrown
     *
     * @return mixed
     */
    public static function getDefault()
    {
        if (is_null($default = Role::where('default', true)->get()->first())) {
            throw new DefaultRoleNotFound();
        }

        return $default;
    }

    /**
     * Returns god role. If it does not exist, then an exception is thrown.
     *
     * @return mixed
     */
    public static function getGod()
    {
        if (is_null($god = Role::where('god', true)->get()->first())) {
            throw new GodRoleNotFound();
        }

        return $god;
    }
}