<?php


namespace Kodilab\LaravelBatuta\Models;


use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;
use Kodilab\LaravelBatuta\Contracts\Permissionable;
use Kodilab\LaravelBatuta\Exceptions\DefaultRoleNotFound;
use Kodilab\LaravelBatuta\Exceptions\GodRoleNotFound;
use Kodilab\LaravelBatuta\Traits\RolePermissions;

class Role extends Model implements Permissionable
{
    use RolePermissions;

    protected $fillable = ['name', 'god', 'default'];

    protected $casts = [
        'god' => 'boolean',
        'default' => 'boolean'
    ];

    public function __construct(array $attributes = [])
    {
        $this->table = config('batuta.tables.roles', 'roles');

        parent::__construct($attributes);
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::deleting(function (Role $role) {

            if ($role->isDefault()) {
                throw new \InvalidArgumentException('Default role can not be removed');
            }

            if ($role->isGod()) {
                throw new \InvalidArgumentException('God role can not be removed');
            }

        });
    }

    public function save(array $options = [])
    {
        $result = null;

        DB::beginTransaction();

        try {

            if ($this->isDefault()) {
                $persisted_default_id = DB::table($this->getTable())->where('default', true)
                    ->pluck('id')->first();

                if (!is_null($persisted_default_id)) {
                    DB::table($this->getTable())->where('default', true)
                        ->where('id', $persisted_default_id)->update(['default' => false]);
                }
            }

            $result = parent::save($options); // TODO: Change the autogenerated stub

        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
        }

        DB::commit();
        return $result;
    }

    /**
     * Returns whether this role is the default role
     *
     * @return mixed
     */
    public function isDefault()
    {
        return $this->default;
    }

    public function isGod()
    {
        return $this->god;
    }

    /**
     * Returns the default role. If it does not exist, then an exception is thrown
     *
     * @return mixed
     */
    public static function getDefault()
    {
        if (is_null($default = Role::where('default', true)->get()->first())) {
            throw new DefaultRoleNotFound();
        }

        return $default;
    }

    /**
     * Returns god role. If it does not exist, then an exception is thrown.
     *
     * @return mixed
     */
    public static function getGod()
    {
        return Role::where('god', true)->get()->first();
    }
}