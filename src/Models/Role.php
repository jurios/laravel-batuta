<?php

namespace Kodilab\LaravelBatuta\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;
use Kodilab\LaravelBatuta\Contracts\HasPermissions;
use Kodilab\LaravelBatuta\Traits\RolePermissions;

class Role extends Model implements HasPermissions
{
    use RolePermissions;

    protected $fillable = ['name', 'god', 'default'];

    protected $casts = [
        'god' => 'boolean',
        'default' => 'boolean'
    ];

    public function __construct(array $attributes = [])
    {
        $this->table = config('batuta.tables.roles', 'batuta_roles');
        parent::__construct($attributes);
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::updating(function (Role $role) {
            if ((bool)$role->getOriginal('god') === true) {
                $role->god = true;
            }

            if ((bool)$role->getOriginal('default') === true) {
                $role->default = true;
            }
        });
    }

    /**
     * Overloading save method. It uses a DB transaction in order to update default & god attributes.
     * @param array $options
     * @return bool|null
     */
    public function save(array $options = [])
    {
        DB::beginTransaction();

        $result = null;

        try {
            if ($this->god === true) {
                DB::table($this->table)->where('god', true)->update(['god' => false]);
            }

            if ($this->default === true) {
                DB::table($this->table)->where('default', true)->update(['default' => false]);
            }

            $result = parent::save($options);

        } catch (\Exception $e) {
            DB::rollBack();
        }

        DB::commit();

        return $result;
    }

    /**
     * Returns whether the role is god
     *
     * @return mixed
     */
    public function isGod()
    {
        return $this->god;
    }

    /**
     * Returns whether the role is a default role
     *
     * @return mixed
     */
    public function isDefault()
    {
        return $this->default;
    }

    /**
     * @return mixed
     */
    public static function god()
    {
        return Role::where('god', true)->get()->first();
    }
}