<?php


namespace Kodilab\LaravelBatuta\Tests\Unit\Traits;


use Illuminate\Foundation\Testing\WithFaker;
use Kodilab\LaravelBatuta\Models\Action;
use Kodilab\LaravelBatuta\Tests\fixtures\Models\User;
use Kodilab\LaravelBatuta\Tests\TestCase;

class HasPermissionsTest extends TestCase
{
    use WithFaker;

    /** @var User */
    protected $user;

    /** @var Action */
    protected $action;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = factory(User::class)->create();
        $this->action = factory(Action::class)->create();

    }

    public function test_updatePermission_should_update_a_permission()
    {
        $this->user->updatePermission($this->action, false);
        $this->assertFalse($this->user->actions()->find($this->action->id)->pivot->permission);

        $this->user->updatePermission($this->action, true);
        $this->assertTrue($this->user->actions()->find($this->action->id)->pivot->permission);
    }

    public function test_bulkPermissions_should_update_multiple_permissions()
    {
        $actions = factory(Action::class, 10)->create();

        $permissions = [];

        foreach ($actions as $action) {
            $permissions[$action->id] = $this->faker->boolean;
        }

        $this->user->bulkPermissions($permissions);

        foreach ($permissions as $actionId => $permission) {
            $this->assertEquals($permission, $this->user->actions()->find($actionId)->pivot->permission);
        }
    }

    public function test_bulkPermissions_should_not_remove_previous_permissions()
    {
        $this->user->updatePermission($this->action, true);

        $actions = factory(Action::class, 10)->create();
        $permissions = [];
        foreach ($actions as $action) {
            $permissions[$action->id] = $this->faker->boolean;
        }
        $this->user->bulkPermissions($permissions);

        $this->assertTrue($this->user->actions()->find($this->action->id)->pivot->permission);
    }

    public function test_bulkPermissions_with_detaching_mode_should_remove_previous_permissions()
    {
        $this->user->updatePermission($this->action, true);

        $actions = factory(Action::class, 10)->create();
        $permissions = [];
        foreach ($actions as $action) {
            $permissions[$action->id] = $this->faker->boolean;
        }
        $this->user->bulkPermissions($permissions, true);

        $this->assertNull($this->user->actions()->find($this->action->id));
    }

    public function test_hasPermission_should_return_true_if_the_permission_is_set_and_is_true()
    {
        $this->user->updatePermission($this->action, true);

        $this->assertTrue($this->user->hasPermission($this->action));
    }

    public function test_hasPermission_should_return_false_if_the_permission_is_set_and_is_false()
    {
        $this->user->updatePermission($this->action, false);

        $this->assertFalse($this->user->hasPermission($this->action));
    }

    public function test_hasPermission_should_return_false_if_the_permission_is_not_set()
    {
        $this->user->updatePermission($this->action, false);

        $this->assertFalse($this->user->hasPermission($this->action));
    }

    public function test_hasPermission_should_return_true_if_grantAllPermissions_returns_true()
    {
        $this->user->grant_all = true;

        $this->user->updatePermission($this->action, false);

        $this->assertTrue($this->user->hasPermission($this->action));

        $this->user->grant_all = false;

        $this->user->updatePermission($this->action, false);

        $this->assertFalse($this->user->hasPermission($this->action));
    }
}