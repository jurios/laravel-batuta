<?php


namespace Kodilab\LaravelBatuta\Tests\Unit;


use Kodilab\LaravelBatuta\Models\Role;
use Kodilab\LaravelBatuta\Tests\TestCase;

class RoleTest extends TestCase
{
    /** @var Role */
    protected $god_role;

    /** @var Role */
    protected $default_role;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->god_role = Role::where('god', true)->get()->first();
        $this->default_role = Role::where('default', true)->get()->first();
    }

    public function test_persisting_a_new_god_role_should_remove_god_tag_to_others_roles()
    {
        $this->assertTrue($this->god_role->isGod());

        $role = factory(Role::class)->create([
            'god' => true
        ]);

        $this->god_role->refresh();

        $this->assertFalse($this->god_role->isGod());
        $this->assertTrue($role->isGod());
    }

    public function test_persisting_a_new_god_role_should_rollback_if_new_role_throw_an_exception()
    {
        $this->assertTrue($this->god_role->isGod());

        $role = factory(Role::class)->make(['name' => null, 'god' => true]);

        try {
            $role->save();
        } catch (\Exception $e) {}

        $this->god_role->refresh();

        $this->assertFalse(Role::where('god', true)->get()->isEmpty());
    }

    public function test_updating_an_existing_role_to_god_role_should_remove_the_god_tag_to_the_other_roles()
    {
        $role = factory(Role::class)->create();

        $role->update(['god' => true]);

        $this->god_role->refresh();

        $this->assertFalse($this->god_role->isGod());
        $this->assertTrue($role->isGod());
    }

    public function test_updating_an_existing_role_to_god_role_should_not_remove_the_god_tag_if_it_throws_an_exception()
    {
        $role = factory(Role::class)->create();

        try {
            $role->update(['name' => null, 'god' => true]);
        } catch (\Exception $e) {}

        $this->god_role->refresh();

        $this->assertTrue($this->god_role->isGod());
    }

    public function test_persisting_a_new_default_role_should_remove_default_tag_to_other_roles()
    {
        /** @var Role $default_role */
        $default_role = Role::where('default', true)->get()->first();

        $this->assertTrue($default_role->isDefault());

        /** @var Role $role */
        $role = factory(Role::class)->create([
            'default' => true
        ]);

        $default_role->refresh();

        $this->assertFalse($default_role->isDefault());
        $this->assertTrue($role->isDefault());
    }

    public function test_persisting_a_new_default_role_should_rollback_if_new_role_throw_an_exception()
    {
        /** @var Role $default_role */
        $default_role = Role::where('default', true)->get()->first();

        $this->assertTrue($default_role->isDefault());

        $role = factory(Role::class)->make(['name' => null, 'default' => true]);

        try {
            $role->save();
        } catch (\Exception $e) {}

        $default_role->refresh();

        $this->assertFalse(Role::where('default', true)->get()->isEmpty());
    }

    public function test_updating_an_existing_role_to_default_role_should_remove_the_default_tag_to_the_other_roles()
    {
        /** @var Role $role */
        $role = factory(Role::class)->create();

        $role->update(['default' => true]);

        $this->default_role->refresh();

        $this->assertFalse($this->default_role->isDefault());
        $this->assertTrue($role->isDefault());
    }

    public function test_updating_an_existing_role_to_default_role_should_not_remove_the_default_tag_if_it_throws_an_exception()
    {
        $role = factory(Role::class)->create();

        try {
            $role->update(['name' => null, 'default' => true]);
        } catch (\Exception $e) {}

        $this->default_role->refresh();

        $this->assertTrue($this->default_role->isDefault());
    }

    public function test_update_a_god_role_should_always_keep_the_god_tag()
    {
        $this->god_role->update([
            'god' => false
        ]);
        $this->god_role->refresh();

        $this->assertTrue($this->god_role->isGod());
    }

    public function test_update_a_default_role_should_always_keep_the_default_tag()
    {
        $this->default_role->update([
            'default' => false
        ]);
        $this->default_role->refresh();

        $this->assertTrue($this->default_role->isDefault());
    }

    public function test_god_method_should_return_the_god_role()
    {
        $this->assertTrue($this->god_role->is(Role::god()));
    }
}